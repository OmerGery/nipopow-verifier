\selectlanguage *{latex}
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces Merkle Tree\relax }}{7}{figure.caption.1}%
\contentsline {figure}{\numberline {2.2}{\ignorespaces The Bitcoin blockchain\relax }}{9}{figure.caption.2}%
\contentsline {figure}{\numberline {2.3}{\ignorespaces Bitcoin transactions\relax }}{10}{figure.caption.3}%
\contentsline {figure}{\numberline {2.4}{\ignorespaces The interlinked blockchain. Each superblock is drawn taller according to its achieved level. Each block links to all the blocks that are not being overshadowed by their descendants. The most recent (right-most) block links to the four blocks it has direct line-of-sight to.\relax }}{16}{figure.caption.4}%
\contentsline {figure}{\numberline {2.5}{\ignorespaces Combination of multiple proofs in a DAG. The red block is the block of interest. Honest proof consists of blocks connected by solid lines and adversarial proof by dashed lines. The adversary intentionally uses a different set of blocks.\relax }}{21}{figure.caption.5}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces The red block indicates the block of interest. Curved connections imply intermediate blocks. The adversary creates a proof for an event that does not exist in the honest chain\relax }}{25}{figure.caption.8}%
\contentsline {figure}{\numberline {3.2}{\ignorespaces Gas consumption with respect to chain and corresponding proof size\relax }}{25}{figure.caption.9}%
\contentsline {figure}{\numberline {3.3}{\ignorespaces A premined chain started before the initiation of the public network. The older chain contains more blocks and proof-of-work.\relax }}{27}{figure.caption.11}%
\contentsline {figure}{\numberline {3.4}{\ignorespaces A premined chain started before Bitcoin. The older chain contains more blocks.\relax }}{27}{figure.caption.12}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces Gas consumption for memory and storage\relax }}{30}{figure.caption.13}%
\contentsline {figure}{\numberline {4.2}{\ignorespaces The \emph {hash-and-resubmit} pattern. First, an invoker calls \textsf {func}$_1$($\mathsf {d}_0$). $\mathsf {d}_0$ is processed \emph {on-chain} and $\mathsf {d}$ is generated. The signature of $\mathsf {d}$ is stored in the blockchain as the digest of a hash function \textsf {H}(.). Then, a full node that observes invocations of $\textsf {func}_1$ retrieves $\mathsf {d}_0$, and generates $\mathsf {d}$ by performing the analogous processing on $\mathsf {d}_0$ \emph {off-chain}. An adversarial observer dispatches $\mathsf {d^*}$, where $\mathsf {d^*}$$\neq $$\mathsf {d}$. Finally, the nodes invoke $\textsf {func}_2$(.). In $\textsf {func}_2$, the validation of input data is performed, reverting the function call if the signatures of the input does not match with the signature of the originally processed data. By applying a \emph {hash-and-resubmit pattern}, only the fixed-size signature of $\mathsf {d}$ is stored to the contract's state, replacing arbitrarily large structures.\relax }}{33}{figure.caption.14}%
\contentsline {figure}{\numberline {4.3}{\ignorespaces Gas-cost reduction using the \emph {hash-and-resubmit} pattern (lower is better). By avoiding gas-heavy storage operations, the aggregated cost of \textsf {submit} and \textsf {contest} is decreased by 95\%.\relax }}{35}{figure.caption.15}%
\contentsline {figure}{\numberline {4.4}{\ignorespaces Forked chains for our gas analysis.\relax }}{37}{figure.caption.16}%
\contentsline {figure}{\numberline {4.5}{\ignorespaces Performance improvement using hash-and-resubmit pattern in NIPoPoWs compared to previous work for a secure value of $m$ (lower is better). The gas consumption is decreased by approximately 50\%.\relax }}{37}{figure.caption.17}%
\contentsline {figure}{\numberline {4.6}{\ignorespaces \textbf {I.} The calculation of root in \emph {hash} phase. \textbf {II.} The verification of the root in \emph {resubmit} phase. \textsf {H}($k$) denotes the digest of element $k$. \textsf {H}($kl$) denotes the result of \textsf {H}(\textsf {H}($k$) $|$ \textsf {H}($l$))\relax }}{39}{figure.caption.18}%
\contentsline {figure}{\numberline {4.7}{\ignorespaces Trade-offs between \emph {hash-and-resubmit} variations. In the vertical axis the gas consumption is displayed. In the horizontal axis the size of $\mathsf {d}$. The size of $d_0$ is 10KB bytes, and the hash functions we use are the pre-compiled \texttt {sha256} and \texttt {keccak}.\relax }}{40}{figure.caption.20}%
\contentsline {figure}{\numberline {4.8}{\ignorespaces Fork of two proofs. Solid lines connect blocks of $\mathsf {\TextOrMath {\textpi }{\mathpi }_{s}}$, and dashed lines connect blocks of $\mathsf {\TextOrMath {\textpi }{\mathpi }_{c}}$. In this configuration, blocks in dashed circles are aimless blocks of interest, and the block in the solid circle is a meaningful block of interest. Blocks B, C and E are aimless because they exist in $\mathsf {\TextOrMath {\textpi }{\mathpi }_{c}}$. Block A is aimless because it belongs to the subchain $\mathsf {\TextOrMath {\textpi }{\mathpi }_{s}}\{{:}\mathsf {LCA}\}$ \relax }}{42}{figure.caption.22}%
\contentsline {figure}{\numberline {4.9}{\ignorespaces The red block is the block of interest. The blocks connected with solid lines indicate $\TextOrMath {\textpi }{\mathpi }_{exist}$ and blocks connected with dashed lines indicate $\TextOrMath {\textpi }{\mathpi }_{cont}$. In (a), an adversary can dispatch a flawed proof that skips the block of interest. $\TextOrMath {\textpi }{\mathpi }_{exits}$ and $\TextOrMath {\textpi }{\mathpi }_{cont}$ are aggregated in the DAG, which is traversed to discover best proof. In (b), the proofs are linearly iterated to determine if $\TextOrMath {\textpi }{\mathpi }_{exist}\{:\textrm {LCA}\} \subseteq \TextOrMath {\textpi }{\mathpi }_{cont}\{:\textrm {LCA} \}$ \relax }}{43}{figure.caption.23}%
\contentsline {figure}{\numberline {4.10}{\ignorespaces Gas consumption for DAG+ancestors and subset\relax }}{43}{figure.caption.24}%
\contentsline {figure}{\numberline {4.11}{\ignorespaces An adversary attests to contest with a malformed proof. Adversary proof consists of blocks \{A, X, B, C, D'\} that achieve better score against submit proof \{A, B, C, D\}. This attempt is rejected due to the minimal-fork requirement.\relax }}{44}{figure.caption.25}%
\contentsline {figure}{\numberline {4.12}{\ignorespaces Performance improvement using minimal fork (lower is better). The gas consumption is decreased by approximately 55\%.\relax }}{46}{figure.caption.26}%
\contentsline {figure}{\numberline {4.13}{\ignorespaces Fork of two proofs. Striped blocks determine the score of each proof. Black blocks belong to the level that has the best score. Only black blocks are part of the best level of the contesting proof.\relax }}{48}{figure.caption.29}%
\contentsline {figure}{\numberline {4.14}{\ignorespaces Performance improvement using optimistic schema in submit phase and best level proof in contesting proof (lower is better). Gas consumption is decreased by approximately 65\%.\relax }}{51}{figure.caption.31}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {5.1}{\ignorespaces Cost of submitting a NIPoPoW proof.\relax }}{54}{figure.caption.32}%
\contentsline {figure}{\numberline {5.2}{\ignorespaces Cryptoeconomic recommendations for the NIPoPoW superlight client.\relax }}{55}{figure.caption.33}%
\addvspace {10\p@ }
